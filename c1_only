{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/suajeong52/collapsible_tube/blob/main/c1_only\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "pCXogKOHma_c",
        "outputId": "5ac21c7f-ed51-41fc-cda2-d67ff91dd8ec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting sciann\n",
            "  Downloading SciANN-0.6.6.1-py3-none-any.whl (174 kB)\n",
            "\u001b[?25l\r\u001b[K     |█▉                              | 10 kB 37.0 MB/s eta 0:00:01\r\u001b[K     |███▊                            | 20 kB 32.9 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 30 kB 19.4 MB/s eta 0:00:01\r\u001b[K     |███████▌                        | 40 kB 7.7 MB/s eta 0:00:01\r\u001b[K     |█████████▍                      | 51 kB 7.7 MB/s eta 0:00:01\r\u001b[K     |███████████▎                    | 61 kB 9.0 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 71 kB 9.6 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 81 kB 9.6 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 92 kB 10.6 MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 102 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 112 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▋         | 122 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▍       | 133 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 143 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▏   | 153 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████  | 163 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 174 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 174 kB 8.7 MB/s \n",
            "\u001b[?25hCollecting pybtex\n",
            "  Downloading pybtex-0.24.0-py2.py3-none-any.whl (561 kB)\n",
            "\u001b[?25l\r\u001b[K     |▋                               | 10 kB 41.0 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 20 kB 51.3 MB/s eta 0:00:01\r\u001b[K     |█▊                              | 30 kB 60.0 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 40 kB 65.6 MB/s eta 0:00:01\r\u001b[K     |███                             | 51 kB 66.7 MB/s eta 0:00:01\r\u001b[K     |███▌                            | 61 kB 71.1 MB/s eta 0:00:01\r\u001b[K     |████                            | 71 kB 64.0 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 81 kB 62.6 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 92 kB 64.9 MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 102 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 112 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████                         | 122 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 133 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 143 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 153 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████▍                      | 163 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 174 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████▌                     | 184 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 194 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████▊                    | 204 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 215 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 225 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 235 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 245 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▋                 | 256 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 266 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 276 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 286 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 296 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 307 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 317 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▊             | 327 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 337 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 348 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 358 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 368 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 378 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 389 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 399 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 409 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 419 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 430 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 440 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 450 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 460 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▉     | 471 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▍    | 481 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 491 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 501 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 512 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▊  | 522 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 532 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 542 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▌| 552 kB 67.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 561 kB 67.3 MB/s \n",
            "\u001b[?25hRequirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.7/dist-packages (from sciann) (1.4.1)\n",
            "Requirement already satisfied: sklearn in /usr/local/lib/python3.7/dist-packages (from sciann) (0.0)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from sciann) (1.15.0)\n",
            "Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from sciann) (3.1.0)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from sciann) (3.13)\n",
            "Requirement already satisfied: numpy>=1.16.4 in /usr/local/lib/python3.7/dist-packages (from sciann) (1.21.6)\n",
            "Collecting tensorflow<=2.5.3,>=2.1.4\n",
            "  Downloading tensorflow-2.5.3-cp37-cp37m-manylinux2010_x86_64.whl (460.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 460.3 MB 8.4 kB/s \n",
            "\u001b[?25hCollecting keras-nightly~=2.5.0.dev\n",
            "  Downloading keras_nightly-2.5.0.dev2021032900-py2.py3-none-any.whl (1.2 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.2 MB 61.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: wheel~=0.35 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (0.37.1)\n",
            "Collecting absl-py~=0.10\n",
            "  Downloading absl_py-0.15.0-py3-none-any.whl (132 kB)\n",
            "\u001b[K     |████████████████████████████████| 132 kB 76.8 MB/s \n",
            "\u001b[?25hCollecting gast==0.4.0\n",
            "  Downloading gast-0.4.0-py3-none-any.whl (9.8 kB)\n",
            "Collecting tensorflow-estimator<2.6.0,>=2.5.0\n",
            "  Downloading tensorflow_estimator-2.5.0-py2.py3-none-any.whl (462 kB)\n",
            "\u001b[K     |████████████████████████████████| 462 kB 69.6 MB/s \n",
            "\u001b[?25hRequirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (3.17.3)\n",
            "Requirement already satisfied: tensorboard~=2.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (2.8.0)\n",
            "Requirement already satisfied: termcolor~=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (1.1.0)\n",
            "Requirement already satisfied: keras-preprocessing~=1.1.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (1.1.2)\n",
            "Collecting numpy>=1.16.4\n",
            "  Downloading numpy-1.19.5-cp37-cp37m-manylinux2010_x86_64.whl (14.8 MB)\n",
            "\u001b[K     |████████████████████████████████| 14.8 MB 58.2 MB/s \n",
            "\u001b[?25hCollecting typing-extensions~=3.7.4\n",
            "  Downloading typing_extensions-3.7.4.3-py3-none-any.whl (22 kB)\n",
            "Collecting wrapt~=1.12.1\n",
            "  Downloading wrapt-1.12.1.tar.gz (27 kB)\n",
            "Collecting grpcio~=1.34.0\n",
            "  Downloading grpcio-1.34.1-cp37-cp37m-manylinux2014_x86_64.whl (4.0 MB)\n",
            "\u001b[K     |████████████████████████████████| 4.0 MB 56.0 MB/s \n",
            "\u001b[?25hRequirement already satisfied: astunparse~=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (1.6.3)\n",
            "Collecting flatbuffers~=1.12.0\n",
            "  Downloading flatbuffers-1.12-py2.py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: opt-einsum~=3.3.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (3.3.0)\n",
            "Requirement already satisfied: google-pasta~=0.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow<=2.5.3,>=2.1.4->sciann) (0.2.0)\n",
            "Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->sciann) (1.5.2)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (2.23.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (1.8.1)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (1.0.1)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (0.6.1)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (1.35.0)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (57.4.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (0.4.6)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (3.3.7)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (4.8)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (0.2.8)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (4.2.4)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (4.11.3)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (3.8.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (0.4.8)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (2021.10.8)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (2.10)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.5->tensorflow<=2.5.3,>=2.1.4->sciann) (3.2.0)\n",
            "Collecting latexcodec>=1.0.4\n",
            "  Downloading latexcodec-2.0.1-py2.py3-none-any.whl (18 kB)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sklearn->sciann) (1.0.2)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn->sciann) (1.1.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->sklearn->sciann) (3.1.0)\n",
            "Building wheels for collected packages: wrapt\n",
            "  Building wheel for wrapt (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wrapt: filename=wrapt-1.12.1-cp37-cp37m-linux_x86_64.whl size=68719 sha256=66931d0ae003db671114867c9e2aad2ce4d86280a931b761e4c1eedc1613528a\n",
            "  Stored in directory: /root/.cache/pip/wheels/62/76/4c/aa25851149f3f6d9785f6c869387ad82b3fd37582fa8147ac6\n",
            "Successfully built wrapt\n",
            "Installing collected packages: typing-extensions, numpy, grpcio, absl-py, wrapt, tensorflow-estimator, latexcodec, keras-nightly, gast, flatbuffers, tensorflow, pybtex, sciann\n",
            "  Attempting uninstall: typing-extensions\n",
            "    Found existing installation: typing-extensions 4.2.0\n",
            "    Uninstalling typing-extensions-4.2.0:\n",
            "      Successfully uninstalled typing-extensions-4.2.0\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 1.21.6\n",
            "    Uninstalling numpy-1.21.6:\n",
            "      Successfully uninstalled numpy-1.21.6\n",
            "  Attempting uninstall: grpcio\n",
            "    Found existing installation: grpcio 1.46.1\n",
            "    Uninstalling grpcio-1.46.1:\n",
            "      Successfully uninstalled grpcio-1.46.1\n",
            "  Attempting uninstall: absl-py\n",
            "    Found existing installation: absl-py 1.0.0\n",
            "    Uninstalling absl-py-1.0.0:\n",
            "      Successfully uninstalled absl-py-1.0.0\n",
            "  Attempting uninstall: wrapt\n",
            "    Found existing installation: wrapt 1.14.1\n",
            "    Uninstalling wrapt-1.14.1:\n",
            "      Successfully uninstalled wrapt-1.14.1\n",
            "  Attempting uninstall: tensorflow-estimator\n",
            "    Found existing installation: tensorflow-estimator 2.8.0\n",
            "    Uninstalling tensorflow-estimator-2.8.0:\n",
            "      Successfully uninstalled tensorflow-estimator-2.8.0\n",
            "  Attempting uninstall: gast\n",
            "    Found existing installation: gast 0.5.3\n",
            "    Uninstalling gast-0.5.3:\n",
            "      Successfully uninstalled gast-0.5.3\n",
            "  Attempting uninstall: flatbuffers\n",
            "    Found existing installation: flatbuffers 2.0\n",
            "    Uninstalling flatbuffers-2.0:\n",
            "      Successfully uninstalled flatbuffers-2.0\n",
            "  Attempting uninstall: tensorflow\n",
            "    Found existing installation: tensorflow 2.8.0+zzzcolab20220506162203\n",
            "    Uninstalling tensorflow-2.8.0+zzzcolab20220506162203:\n",
            "      Successfully uninstalled tensorflow-2.8.0+zzzcolab20220506162203\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "xarray-einstats 0.2.2 requires numpy>=1.21, but you have numpy 1.19.5 which is incompatible.\n",
            "datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n",
            "albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Successfully installed absl-py-0.15.0 flatbuffers-1.12 gast-0.4.0 grpcio-1.34.1 keras-nightly-2.5.0.dev2021032900 latexcodec-2.0.1 numpy-1.19.5 pybtex-0.24.0 sciann-0.6.6.1 tensorflow-2.5.3 tensorflow-estimator-2.5.0 typing-extensions-3.7.4.3 wrapt-1.12.1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "numpy"
                ]
              }
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "pip install sciann"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "b5aOIb3soYpB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c37e397b-de76-4c84-ac74-9605eba52a5a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---------------------- SCIANN 0.6.6.1 ---------------------- \n",
            "For details, check out our review paper and the documentation at: \n",
            " +  \"https://www.sciencedirect.com/science/article/pii/S0045782520307374\", \n",
            " +  \"https://arxiv.org/abs/2005.08803\", \n",
            " +  \"https://www.sciann.com\". \n",
            "\n",
            " Need support or would like to contribute, please join sciann`s slack group: \n",
            " +  \"https://join.slack.com/t/sciann/shared_invite/zt-ne1f5jlx-k_dY8RGo3ZreDXwz0f~CeA\" \n",
            " \n",
            "TensorFlow Version: 2.5.3 \n",
            "Python Version: 3.7.13 (default, Apr 24 2022, 01:04:09) \n",
            "[GCC 7.5.0] \n",
            "\n"
          ]
        }
      ],
      "source": [
        "import numpy as np \n",
        "import sciann as sn \n",
        "import matplotlib.pyplot as plt  \n",
        "from numpy import pi\n",
        "from sciann.utils.math import diff, sign, sin, sqrt, pow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "4JEbp5XeobQz"
      },
      "outputs": [],
      "source": [
        "x = sn.Variable('x')\n",
        "t = sn.Variable('t')\n",
        "u = sn.Functional('u', [x,t],8*[20], 'tanh')\n",
        "#A = sn.Functional('A', [x,t],  8*[20], 'relu')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "GN6csucsomo9"
      },
      "outputs": [],
      "source": [
        "#L1 = diff(A, t) + u * diff(A, x) + A * diff(u, x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "bcHVQkxapxLB"
      },
      "outputs": [],
      "source": [
        "rho = 1\n",
        "#beta = 200\n",
        "beta = 1\n",
        "#L2 = diff(u, t) + u * diff(u, x) + beta / (2 * rho * sn.pow(A * A + 0.01, 0.25)) * diff(A, x, order=1)\n",
        "L2 = diff(u, t) + u * diff(u, x)  "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TOL = 0.001\n",
        "T = 10\n",
        "omega = 2 * np.pi / T\n",
        "C1 = (1 - sign(t - TOL)) * (u - 0)\n",
        "#C2 = (1 - sign(t - TOL)) * (A - 1)\n",
        "#C3 = (1 - sign(x - TOL)) * (u - sin(omega * t))\n",
        "#C3 = (1 - sign(x - TOL)) * (u - sin(2*np.pi *t))\n",
        "#C4 = (1 - sign(x - TOL)) * (A - 1)\n"
      ],
      "metadata": {
        "id": "ZJB4fIbDn8p4"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "Nmiuzz7LuknE"
      },
      "outputs": [],
      "source": [
        "#m = sn.SciModel([x,t], [L1,L2, C1, C3, C4], loss_func=\"mse\", optimizer=\"Adam\")\n",
        "m = sn.SciModel([x,t], [L2, C1], loss_func=\"mse\", optimizer=\"Adam\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "CUeqME5NwKqH"
      },
      "outputs": [],
      "source": [
        "x_data, t_data = np.meshgrid(\n",
        "    np.linspace(0, 10, 100), \n",
        "    np.linspace(0, 20, 100)\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MJ5MTwOFwU7d",
        "outputId": "1ec73ce4-7b7e-4dea-fd7c-e12d6ccd6b22"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Total samples: 10000 \n",
            "Batch size: 50 \n",
            "Total batches: 200 \n",
            "\n",
            "Epoch 1/1000\n",
            "200/200 [==============================] - 8s 14ms/step - batch: 99.5000 - size: 50.0000 - loss: 9.4250e-04 - add_loss: 9.7111e-05 - mul_2_loss: 8.4539e-04 - lr: 0.0070 - time: 8.2683\n",
            "Epoch 2/1000\n",
            "200/200 [==============================] - 2s 11ms/step - batch: 99.5000 - size: 50.0000 - loss: 0.0037 - add_loss: 5.2647e-05 - mul_2_loss: 0.0036 - lr: 0.0070 - time: 2.1881\n",
            "Epoch 3/1000\n",
            "200/200 [==============================] - 2s 12ms/step - batch: 99.5000 - size: 50.0000 - loss: 1.5805e-05 - add_loss: 8.1290e-10 - mul_2_loss: 1.5804e-05 - lr: 0.0070 - time: 2.4711\n",
            "Epoch 4/1000\n",
            "200/200 [==============================] - ETA: 0s - batch: 99.5000 - size: 50.0000 - loss: 7.8812e-10 - add_loss: 7.4491e-10 - mul_2_loss: 4.3213e-11Epoch 00004: early stopping at loss value 7.881223e-10\n",
            "Revise 'stop_loss_value=0.000000010000' in '.train' if it was not your intent. \n",
            "200/200 [==============================] - 2s 12ms/step - batch: 99.5000 - size: 50.0000 - loss: 7.8812e-10 - add_loss: 7.4491e-10 - mul_2_loss: 4.3213e-11 - lr: 0.0070 - time: 2.4968\n"
          ]
        }
      ],
      "source": [
        "#h = m.train([x_data, t_data], 6*['zero'], learning_rate=0.001, epochs=1000, batch_size =120,  verbose=1, shuffle=True)\n",
        "h = m.train([x_data,t_data], 2*['zero'], learning_rate=0.007, epochs=1000, batch_size =50, verbose=1, shuffle=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "v8-xNlG6aCe8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "outputId": "d3c15859-d13d-49a2-f738-5a37e89778a8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f15f93d3510>]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.semilogy(h.history['loss'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lPtgoO3tdQd8"
      },
      "outputs": [],
      "source": [
        "h.history.keys()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3JomNvi-dTGk"
      },
      "outputs": [],
      "source": [
        "time = np.cumsum(h.history['time'])\n",
        "plt.semilogy(time, h.history['loss'],'m')\n",
        "plt.semilogy(time, h.history['add_loss'],'r')\n",
        "#plt.semilogy(time, h.history['add_5_loss'],'b')\n",
        "plt.semilogy(time, h.history['mul_2_loss'],'y')\n",
        "plt.semilogy(time, h.history['mul_4_loss'],'c')\n",
        "#plt.semilogy(time, h.history['mul_10_loss'],'k')\n",
        "#plt.semilogy(time, h.history['mul_11_loss'],'g')\n",
        "plt.legend(['loss','L2','C1', 'C3'])\n",
        "plt.xlabel('time')\n",
        "plt.ylabel('loss')\n",
        "plt.show"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, t_test = np.meshgrid(\n",
        "    np.linspace(0, 1, 30), \n",
        "    np.linspace(0, 0, 1)\n",
        ")\n",
        "u_pred = u.eval(m, [x_test, t_test])\n",
        "#A_pred = A.eval(m, [x_test, t_test])\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ovpBp50q1xuW"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u_pred"
      ],
      "metadata": {
        "id": "5L8DiEvUo_yv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af1cc856-21da-45de-becc-50802168cdb3"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-2.20455229e-04, -1.85258687e-04, -1.59926713e-04,\n",
              "        -1.40376389e-04, -1.24968588e-04, -1.12600625e-04,\n",
              "        -1.02050602e-04, -9.29608941e-05, -8.50632787e-05,\n",
              "        -7.84471631e-05, -7.25165009e-05, -6.72712922e-05,\n",
              "        -6.26519322e-05, -5.84200025e-05, -5.47245145e-05,\n",
              "        -5.15952706e-05, -4.86150384e-05, -4.59924340e-05,\n",
              "        -4.35486436e-05, -4.15816903e-05, -3.95849347e-05,\n",
              "        -3.78564000e-05, -3.61874700e-05, -3.46973538e-05,\n",
              "        -3.35052609e-05, -3.23131680e-05, -3.12402844e-05,\n",
              "        -3.01077962e-05, -2.93627381e-05, -2.84388661e-05]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "u_pred = np.reshape(u_pred,30)\n",
        "#A_pred = np.reshape(A_pred,30)"
      ],
      "metadata": {
        "id": "PMGon0b-pGNn"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u_pred"
      ],
      "metadata": {
        "id": "hYlb4mv0pGr_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ece32eb4-d22c-4699-e6c8-7034fe444b36"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-2.20455229e-04, -1.85258687e-04, -1.59926713e-04, -1.40376389e-04,\n",
              "       -1.24968588e-04, -1.12600625e-04, -1.02050602e-04, -9.29608941e-05,\n",
              "       -8.50632787e-05, -7.84471631e-05, -7.25165009e-05, -6.72712922e-05,\n",
              "       -6.26519322e-05, -5.84200025e-05, -5.47245145e-05, -5.15952706e-05,\n",
              "       -4.86150384e-05, -4.59924340e-05, -4.35486436e-05, -4.15816903e-05,\n",
              "       -3.95849347e-05, -3.78564000e-05, -3.61874700e-05, -3.46973538e-05,\n",
              "       -3.35052609e-05, -3.23131680e-05, -3.12402844e-05, -3.01077962e-05,\n",
              "       -2.93627381e-05, -2.84388661e-05], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test"
      ],
      "metadata": {
        "id": "-VHuBA3kpLmf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30a13f30-23fd-49d7-f37c-0dc68cd43fd6"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.        , 0.03448276, 0.06896552, 0.10344828, 0.13793103,\n",
              "        0.17241379, 0.20689655, 0.24137931, 0.27586207, 0.31034483,\n",
              "        0.34482759, 0.37931034, 0.4137931 , 0.44827586, 0.48275862,\n",
              "        0.51724138, 0.55172414, 0.5862069 , 0.62068966, 0.65517241,\n",
              "        0.68965517, 0.72413793, 0.75862069, 0.79310345, 0.82758621,\n",
              "        0.86206897, 0.89655172, 0.93103448, 0.96551724, 1.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test = np.reshape(x_test, 30)\n",
        "x_test"
      ],
      "metadata": {
        "id": "-UZwEfjVpKC3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2e1360b8-eac0-4f01-8984-9d311093f4a4"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.        , 0.03448276, 0.06896552, 0.10344828, 0.13793103,\n",
              "       0.17241379, 0.20689655, 0.24137931, 0.27586207, 0.31034483,\n",
              "       0.34482759, 0.37931034, 0.4137931 , 0.44827586, 0.48275862,\n",
              "       0.51724138, 0.55172414, 0.5862069 , 0.62068966, 0.65517241,\n",
              "       0.68965517, 0.72413793, 0.75862069, 0.79310345, 0.82758621,\n",
              "       0.86206897, 0.89655172, 0.93103448, 0.96551724, 1.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#fig = plt.figure(figsize=(3, 4))\n",
        "plt.plot(x_test, u_pred)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('u')"
      ],
      "metadata": {
        "id": "AZePPQA0o76P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "365baa27-ef49-46cf-b3c4-853d97ea217c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'u')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, t_test = np.meshgrid(\n",
        "    np.linspace(0, 1, 30), \n",
        "    np.linspace(0.5, 0.5, 1)\n",
        ")\n",
        "u_pred = u.eval(m, [x_test, t_test])\n",
        "#A_pred = A.eval(m, [x_test, t_test])\n",
        "\n",
        "\n",
        "u_pred = np.reshape(u_pred,30)\n",
        "#A_pred = np.reshape(A_pred,30)\n",
        "x_test = np.reshape(x_test, 30)\n",
        "\n",
        "\n",
        "#fig = plt.figure(figsize=(3, 4))\n",
        "plt.plot(x_test, u_pred)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('u')"
      ],
      "metadata": {
        "id": "PKXwlAvy1xq8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "outputId": "04ad160f-669b-4f03-f790-750b784980a0"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'u')"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, t_test = np.meshgrid(\n",
        "    np.linspace(0, 1, 30), \n",
        "    np.linspace(1, 1, 1)\n",
        ")\n",
        "u_pred = u.eval(m, [x_test, t_test])\n",
        "#A_pred = A.eval(m, [x_test, t_test])\n",
        "\n",
        "\n",
        "u_pred = np.reshape(u_pred,30)\n",
        "#A_pred = np.reshape(A_pred,30)\n",
        "x_test = np.reshape(x_test, 30)\n",
        "\n",
        "\n",
        "#fig = plt.figure(figsize=(3, 4))\n",
        "plt.plot(x_test, u_pred)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('u')"
      ],
      "metadata": {
        "id": "h3l2GSFY1xoj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "outputId": "1495c23e-1c8b-4942-c279-ab161d556fae"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'u')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, t_test = np.meshgrid(\n",
        "    np.linspace(0, 1, 30), \n",
        "    np.linspace(1.5, 1.5, 1)\n",
        ")\n",
        "u_pred = u.eval(m, [x_test, t_test])\n",
        "#A_pred = A.eval(m, [x_test, t_test])\n",
        "\n",
        "\n",
        "u_pred = np.reshape(u_pred,30)\n",
        "#A_pred = np.reshape(A_pred,30)\n",
        "x_test = np.reshape(x_test, 30)\n",
        "\n",
        "\n",
        "#fig = plt.figure(figsize=(3, 4))\n",
        "plt.plot(x_test, u_pred)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('u')"
      ],
      "metadata": {
        "id": "coEMQkyelfMO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "outputId": "e6d1e71b-aa19-4b83-ce27-80016b81a0c1"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'u')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, t_test = np.meshgrid(\n",
        "    np.linspace(0, 1, 30), \n",
        "    np.linspace(2, 2, 1)\n",
        ")\n",
        "u_pred = u.eval(m, [x_test, t_test])\n",
        "#A_pred = A.eval(m, [x_test, t_test])\n",
        "\n",
        "\n",
        "u_pred = np.reshape(u_pred,30)\n",
        "#A_pred = np.reshape(A_pred,30)\n",
        "x_test = np.reshape(x_test, 30)\n",
        "\n",
        "\n",
        "#fig = plt.figure(figsize=(3, 4))\n",
        "plt.plot(x_test, u_pred)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('u')"
      ],
      "metadata": {
        "id": "jYuO6UQXF5kH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "outputId": "7d8850bc-0cea-491f-8f4d-9fb1e1a32ad0"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'u')"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "Q7y19JbGjJml"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "collap(05.17)",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMVOwg1SSAL9ClLSL906loc",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}